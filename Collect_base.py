# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XGjX38WMr5JCbL_nUoTUvOPBYUx_61q-
"""

import serial
import csv
import time
import adafruit_ads1x15.ads1115 as ADS
import board
import math
import busio
from adafruit_ads1x15.analog_in import AnalogIn
from threading import Event


# Create the I2C bus
i2c = busio.I2C(board.SCL, board.SDA)

# Create the ADC object using the I2C bus
ads1 = ADS.ADS1115(i2c, address=0x48)
ads2 = ADS.ADS1115(i2c, address=0x49)
ads3 = ADS.ADS1115(i2c, address=0x4A)
ads4 = ADS.ADS1115(i2c, address=0x4B)

# Create differential input between pins 0-1 and 2-3
chan1 = AnalogIn(ads1, ADS.P0, ADS.P1)
chan2 = AnalogIn(ads1, ADS.P2, ADS.P3)
chan3 = AnalogIn(ads2, ADS.P0, ADS.P1)
chan4 = AnalogIn(ads2, ADS.P2, ADS.P3)
chan5 = AnalogIn(ads3, ADS.P0, ADS.P1)
chan6 = AnalogIn(ads3, ADS.P2, ADS.P3)
chan7 = AnalogIn(ads4, ADS.P0, ADS.P1)
chan8 = AnalogIn(ads4, ADS.P2, ADS.P3)

# Variable gains for ADCs as outlined in the datsheet
gains = (2/3, 1, 2, 4, 8, 16)
g = gains[0]
ads1.gain = g
ads2.gain = g
ads3.gain = g
ads4.gain = gains[5]

sampleRate = 2

# Establish the name of the file
date = time.strftime("%m-%d-%Y_%H:%M:%S")
timeout = time.time() + 122400
filename = 'CSVs/Test-'+ date +'.csv'
print(filename)
outputKeys = ['Time','SCV1','SCC2', 'PVV3', 'PVC4', 'LOADV5','LOADC6', 'PYRA', 'TEMP1', 'TEMP2', 'TEMP3', 'TEMP4']

# Variables for the IOT gateway that listens for temp sensor readings. 
global rf_event
global event
port = '/dev/serial0'
baud = 9600
ser = serial.Serial(port=port, baudrate=baud)

#Scaling factors for voltage and current transducer read-ins
v = 10
v_solar = 30
a = 6
pyra = 69.9 * (10 ** -6)


def get_pyra(chanNum):
    try:
        value = (chanNum.voltage)/pyra
    except OSError:
        value = math.nan
    return value

def get_voltage(chanNum, factor):
    try:
        value = (chanNum.voltage)*factor
    except OSError:
        value = math.nan
    return value

def get_current(chanNum):
    try:
        value = (chanNum.voltage)*a
    except OSError:
        value = math.nan
    return value

def pyra_wait(chanNum):
    current_time = time.strftime("%M%S")
    if (int(current_time[0:2]) % 5 == 0 and int(current_time[2:]) < sampleRate):
        value = get_pyra(chanNum)
    else:
        value = None
    return value

def get_temp():
    try:
        llapMsg = ""
        while ser.inWaiting():
            rf_event.set()
            llapMsg += ser.read()
            # check we have the start of a LLAP message
            t=llapMsg.find('a');
            if (t>=0 and len(llapMsg)-t>=12): # we have an llap message
                start_time = time.time()
                temp_dict[llapMsg[t+1:t+3]] = llapMsg[t+3:t+12]
                llapMsg=""
            if event.is_set():
                break
            sleep(0.01)
    except Exception as e:
          template = "An exception of type {0} occurred. Arguments:\n{1!r}"
          message = template.format(type(e).__name__, e.args)
          print(message)
          print(e)
          event.set()

# Open file for csv
with open(filename,'w') as csvfile:
    filewriter = csv.DictWriter(csvfile, outputKeys)
    filewriter.writeheader()
    temp_dict = {}
    while True:
        start_time = time.time()
        #Flush the temperature Queue, putting entries into temp_dict
        get_temp()
        Outputs = {
            'Time' : time.strftime("%m:%d-%H:%M:%S"),
            'SCV1': get_voltage(chan1, v),
            'SCC2': get_current(chan2),
            'PVV3': get_voltage(chan3, v_solar),
            'PVC4': get_current(chan4)
            'LOADV5': get_voltage(chan5, v),
            'LOADC6': get_current(chan6),
            'PYRA': pyra_wait(chan8),
            **temp_dict
        }
       
        filewriter.writerow(Outputs)
        csvfile.flush()
        
        if time.time() > timeout:
            print("Time's up!")
            break
        
        time.sleep(sampleRate - ((time.time() - start_time) % sampleRate))